seed_key_pairs = [
    ([0x00, 0xDC, 0x11], [0xBD, 0xBF, 0x56, 0xEE, 0xE8, 0xCD]),
    ([0x01, 0x44, 0x79], [0xB7, 0x1E, 0x80, 0x8E, 0x38, 0x75]),
    ([0x01, 0x50, 0x85], [0xB7, 0x1E, 0x83, 0x8E, 0x38, 0x75]),
    ([0x01, 0x64, 0x99], [0xB7, 0x1E, 0x80, 0x96, 0x38, 0x75]),
    ([0x01, 0x57, 0x8C], [0xBD, 0xBF, 0x56, 0xEE, 0xEA, 0x23]),
    ([0x01, 0x58, 0x8D], [0xBD, 0xBF, 0x56, 0xEE, 0xE6, 0x45]),
    ([0x01, 0x92, 0xC7], [0xB7, 0x1E, 0x82, 0x06, 0x38, 0x75]),
    ([0x01, 0x3D, 0x72], [0xBD, 0xBF, 0x56, 0xEE, 0xEB, 0x0D]),
    ([0x01, 0x85, 0xBA], [0xB7, 0x1E, 0x84, 0x36, 0x38, 0x75]),
]

def xor_brute_analysis(pairs):
    for byte_idx in range(0, 6):  # key[2] to key[5]
        print(f"\nKey Byte {byte_idx} XORed with each seed byte:")
        for i, (seed, key) in enumerate(pairs):
            results = [key[byte_idx] ^ s for s in seed]
            print(f"Pair {i+1:02}: key[{byte_idx}] = {hex(key[byte_idx])}  "
                  f"-> XOR with seed {seed} = {[hex(r) for r in results]}")

xor_brute_analysis(seed_key_pairs)