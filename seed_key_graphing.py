import matplotlib.pyplot as plt

# Provided seed/key pairs
seed_key_pairs = [
    ([0x00, 0xDC, 0x11], [0xBD, 0xBF, 0x56, 0xEE, 0xE8, 0xCD]),
    ([0x01, 0x44, 0x79], [0xB7, 0x1E, 0x80, 0x8E, 0x38, 0x75]),
    ([0x01, 0x50, 0x85], [0xB7, 0x1E, 0x83, 0x8E, 0x38, 0x75]),
    ([0x01, 0x64, 0x99], [0xB7, 0x1E, 0x80, 0x96, 0x38, 0x75]),
    ([0x01, 0x57, 0x8C], [0xBD, 0xBF, 0x56, 0xEE, 0xEA, 0x23]),
    ([0x01, 0x58, 0x8D], [0xBD, 0xBF, 0x56, 0xEE, 0xE6, 0x45]),
    ([0x01, 0x92, 0xC7], [0xB7, 0x1E, 0x82, 0x06, 0x38, 0x75]),
    ([0x01, 0x3D, 0x72], [0xBD, 0xBF, 0x56, 0xEE, 0xEB, 0x0D]),
    ([0x01, 0x85, 0xBA], [0xB7, 0x1E, 0x84, 0x36, 0x38, 0x75]),
]

# Convert seed to integer
seed_ints = [s[0] << 16 | s[1] << 8 | s[2] for s, _ in seed_key_pairs]

# Split keys into columns
key_bytes = list(zip(*[k for _, k in seed_key_pairs]))

# Plot seed vs each key byte
plt.figure(figsize=(12, 8))
for i, key_column in enumerate(key_bytes):
    plt.scatter(seed_ints, key_column, label=f'Key Byte {i}')
plt.legend()
plt.xlabel("Seed (int)")
plt.ylabel("Key Byte Value")
plt.title("All Key Bytes vs Seed")
plt.show()

def brute_force_xor(seed_bytes, key_bytes):
    results = []
    for i in range(len(key_bytes)):
        xor_vals = [seed_bytes[j] ^ key_bytes[i] for j in range(len(seed_bytes))]
        results.append((i, xor_vals))
    return results